<?xml version="1.0"?>

<robot name="robochon" xmlns:xacro="http://ros.org/wiki/xacro">
  <!-- Define robot constants -->
  <xacro:property name="base_width" value="${3*0.31}" />
  <xacro:property name="base_length" value="${3*0.42}" />
  <xacro:property name="base_height" value="0.18" />

  <xacro:property name="wheel_radius" value="0.20" />
  <xacro:property name="wheel_width" value="0.04" />
  <xacro:property name="wheel_ygap" value="0.025" />
  <xacro:property name="wheel_zoff" value="0.1" />
  <xacro:property name="wheel_xoff" value="0.36" />
  <xacro:property name="caster_radius" value="${(wheel_radius+wheel_zoff-(base_height/2))}" />
  <xacro:property name="caster_xoff" value="${base_length/3}" />
  <!-- <xacro:property name="caster_xoff" value="${0.9*base_length/2}" /> -->
  <xacro:property name="camera" value="0.05" /> <!-- Size of square 'camera' box -->
  <xacro:property name="axel_offset" value="0.1" />

  <xacro:property name="gripper_width" value="0.04" />
  <xacro:property name="gripper_length" value="2." />
  <xacro:property name="gripper_height" value="${(wheel_radius+wheel_zoff)/2}" />


  <!-- Define intertial property macros  -->
  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}" />
      <mass value="${m}" />
      <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}" />
    </inertial>
  </xacro:macro>
  <xacro:macro name="gripper_inertia" params="m w h d">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}" />
      <mass value="${m}" />
      <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}" />
    </inertial>
  </xacro:macro>

  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
      <mass value="${m}" />
      <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy="0" ixz="0" iyy="${(m/12) * (3*r*r + h*h)}" iyz="0" izz="${(m/2) * (r*r)}" />
    </inertial>
  </xacro:macro>

  <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}" />
      <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}" />
    </inertial>
  </xacro:macro>


  <!-- Robot Base -->
  <link name="base_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}" />
      </geometry>
      <material name="Cyan">
        <color rgba="0 1.0 1.0 1.0" />
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}" />
      </geometry>
    </collision>

    <xacro:box_inertia m="15" w="${base_width}" d="${base_length}" h="${base_height}" />
  </link>
  <gazebo reference="base_link">
    <material>Gazebo/Grey</material>
  </gazebo>

  <!-- Robot Footprint -->
  <link name="base_footprint" />

  <joint name="base_joint" type="fixed">
    <parent link="base_link" />
    <child link="base_footprint" />
    <origin xyz="0.0 0.0 ${-(wheel_radius+wheel_zoff)}" rpy="0 0 0" />
  </joint>


  <!-- Wheels -->
  <xacro:macro name="wheel" params="prefix x_reflect y_reflect">

    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}" />
        </geometry>
        <material name="Gray">
          <color rgba="0.5 0.5 0.5 1.0" />
        </material>
      </visual>


      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}" />
        </geometry>
        <surface>
          <friction>
            <ode>
              <mu1>1.2</mu1>
              <mu2>1.2</mu2>
            </ode>
          </friction>
          <contact>
            <ode>
              <kp>500000.0</kp>
              <kd>10.0</kd>
              <max_vel>0.1</max_vel>
              <min_depth>0.001</min_depth>
            </ode>
          </contact>
        </surface>
      </collision>
      <xacro:cylinder_inertia m="0.5" r="${wheel_radius}" h="${wheel_width}" />

    </link>
    <gazebo reference="${prefix}_link">
      <material>Gazebo/Grey</material>
    </gazebo>
    <joint name="${prefix}_joint" type="continuous">
      <parent link="base_link" />
      <child link="${prefix}_link" />
      <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0" />
      <axis xyz="0 1 0" />
    </joint>
  </xacro:macro>

  <xacro:wheel prefix="drivewhl_l" x_reflect="-1" y_reflect="1" />
  <xacro:wheel prefix="drivewhl_r" x_reflect="-1" y_reflect="-1" />

  <!-- Front caster -->
  <xacro:macro name="front_caster" params="prefix y_reflect link_daddy">
    <link name="front_caster_${prefix}">
      <visual>
        <geometry>
          <sphere radius="${caster_radius}" />
        </geometry>
        <material name="Cyan">
          <color rgba="0 1.0 1.0 1.0" />
        </material>
      </visual>

      <collision>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <sphere radius="${caster_radius}" />
        </geometry>
      </collision>
      <xacro:sphere_inertia m="0.5" r="${caster_radius}" />
    </link>
    <gazebo reference="front_caster_${prefix}">
      <mu1>0.01</mu1>
      <mu2>0.01</mu2>
    </gazebo>

    <joint name="caster_joint_${prefix}" type="fixed">
      <parent link="${link_daddy}" />
      <child link="front_caster_${prefix}" />
      <origin xyz="${caster_xoff} ${y_reflect*0.7*base_width/2} ${-(base_height/2)}" rpy="0 0 0" />
    </joint>
  </xacro:macro>

  <xacro:front_caster prefix="front_left" link_daddy="base_link" y_reflect="1" />
  <xacro:front_caster prefix="front_right" link_daddy="base_link" y_reflect="-1" />
  <gazebo reference="front_caster_front_left">
    <material>Gazebo/Red</material>
  </gazebo>

  <gazebo reference="front_caster_front_right">
    <material>Gazebo/Green</material>
  </gazebo>

  <!-- Gripper -->
  <xacro:macro name="gripper" params="prefix x_reflect y_reflect z_reflect z_rotation lenght_x link_daddy">
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <box size="${gripper_length*lenght_x} ${gripper_width} ${gripper_height}" />
        </geometry>
        <material name="Cyan">
          <color rgba="0 1.0 1.0 1.0" />
        </material>
      </visual>
      <collision>
        <geometry>
          <box size="${gripper_length*lenght_x} ${gripper_width} ${gripper_height}" />
        </geometry>
      </collision>
      <xacro:gripper_inertia m="2" w="${gripper_width*lenght_x}" d="${gripper_length}" h="${gripper_height}" />
    </link>
    <gazebo reference="${prefix}_link">
      <mu1>1.4</mu1>
      <mu2>1.4</mu2>
      <material>Gazebo/Grey</material>
    </gazebo>

    <joint name="${prefix}_joint" type="fixed">
      <parent link="${link_daddy}" />
      <child link="${prefix}_link" />
      <origin xyz="${x_reflect*base_length/4} ${y_reflect*(base_width*0.6)} ${(-base_height/2 -wheel_zoff)*z_reflect}" rpy="0 0 ${z_rotation}" />
    </joint>
  </xacro:macro>

  <xacro:gripper prefix="gripper_l" x_reflect="1" y_reflect="1" z_reflect="1" z_rotation="0.3" lenght_x="1" link_daddy="base_link" />
  <xacro:gripper prefix="gripper_r" x_reflect="1" y_reflect="-1" z_reflect="1" z_rotation="-0.3" lenght_x="1" link_daddy="base_link" />
  <xacro:gripper prefix="gripper_hor" x_reflect="-2" y_reflect="0" z_reflect="1" z_rotation="1.57" lenght_x="0.5" link_daddy="base_link" />


  <xacro:gripper prefix="gripper_l_front" x_reflect="1.7" y_reflect="-0.45" z_reflect="0" z_rotation="0.5" lenght_x="0.5" link_daddy="gripper_l_link" />
  <xacro:gripper prefix="gripper_r_front" x_reflect="1.7" y_reflect="0.45" z_reflect="0" z_rotation="-0.5" lenght_x="0.5" link_daddy="gripper_r_link" />


  <!-- LIDAR -->
  <joint name="lidar_joint" type="fixed">
    <parent link="base_link" />
    <child link="lidar_link" />
    <origin xyz="${base_length/2} 0 0.115" rpy="0 0 0" />
  </joint>

  <link name="lidar_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <cylinder radius="0.0508" length="0.05" />
      </geometry>
      <material name="Black">
        <color rgba="${0/255} ${0/255} ${0/255} 1.0" />
      </material>
    </visual>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <cylinder radius="0.0508" length="0.05" />
      </geometry>
    </collision>

    <inertial>
      <mass value="0.114" />
      <origin xyz="0 0 0" rpy="0 0 0" />
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001" />
    </inertial>
  </link>

  <joint name="camera_joint" type="fixed">
    <axis xyz="0 1 0" />
    <origin xyz="${base_length/2} 0 ${base_height}" rpy="0 0 0" />
    <parent link="base_link" />
    <child link="camera_link" />
  </joint>

  <!-- Camera -->
  <link name="camera_link">
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <box size="${camera} ${camera} ${camera}" />
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <box size="${camera} ${camera} ${camera}" />
      </geometry>
      <material name="red" />
    </visual>

    <inertial>
      <mass value="1e-5" />
      <origin xyz="0 0 0" rpy="0 0 0" />
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
    </inertial>
  </link>

  <!-- camera -->
  <gazebo reference="camera_link">
    <sensor type="camera" name="camera1">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>1200</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <always_on>true</always_on>
        <update_rate>5.0</update_rate>
        <camera_name>camera1</camera_name>
        <ros>
          <namespace>/camera</namespace>
          <remapping>~/out:=image_raw</remapping>
          <remapping>~/out:=camera_info</remapping>
        </ros>
        <output_type>sensor_msgs/CameraInfo</output_type>
        <output_type>sensor_msgs/ImageRaw</output_type>
        <frame_name>camera_link</frame_name>
        <hack_baseline>0.07</hack_baseline>
        <distortion_k1>0.0</distortion_k1>
        <distortion_k2>0.0</distortion_k2>
        <distortion_k3>0.0</distortion_k3>
        <distortion_p1>0.0</distortion_p1>
        <distortion_p2>0.0</distortion_p2>
      </plugin>
      <visualize>false</visualize>
    </sensor>
  </gazebo>

  <gazebo>
    <!-- Differential drive -->
    <plugin name='diff_drive' filename='libgazebo_ros_diff_drive.so'>

      <!-- wheels -->
      <left_joint>drivewhl_l_joint</left_joint>
      <right_joint>drivewhl_r_joint</right_joint>

      <!-- kinematics -->
      <wheel_separation>0.35</wheel_separation>
      <wheel_diameter>0.2</wheel_diameter>

      <!-- limits -->
      <max_wheel_torque>20</max_wheel_torque>
      <max_wheel_acceleration>1.0</max_wheel_acceleration>

      <!-- output -->
      <publish_odom>true</publish_odom>
      <publish_odom_tf>true</publish_odom_tf>
      <publish_wheel_tf>true</publish_wheel_tf>

      <odometry_frame>odom_demo</odometry_frame>
      <robot_base_frame>base_link</robot_base_frame>

    </plugin>
  </gazebo>

  <gazebo reference="lidar_link">
    <sensor name="sensor_ray" type="ray">
      <ray>
        <scan>
          <horizontal>
            <samples>360</samples>
            <resolution>1.0</resolution>
            <min_angle>-3.14</min_angle>
            <max_angle>3.14</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.5</min>
          <max>50.0</max>
        </range>
      </ray>
      <always_on>true</always_on>
      <update_rate>1.0</update_rate>
      <plugin name="pc2" filename="libgazebo_ros_ray_sensor.so">
        <ros>
          <namespace>/ray</namespace>
          <remapping>~/out:=pointcloud2</remapping>
        </ros>
        <output_type>sensor_msgs/PointCloud2</output_type>
        <frame_name>lidar_link</frame_name>
      </plugin>
      <plugin name="pc" filename="libgazebo_ros_ray_sensor.so">
        <ros>
          <namespace>/ray</namespace>
          <remapping>~/out:=pointcloud</remapping>
        </ros>
        <output_type>sensor_msgs/PointCloud</output_type>
        <frame_name>lidar_link</frame_name>
      </plugin>
      <plugin name="laserscan" filename="libgazebo_ros_ray_sensor.so">
        <ros>
          <namespace>/ray</namespace>
          <remapping>~/out:=laserscan</remapping>
        </ros>
        <output_type>sensor_msgs/LaserScan</output_type>
        <frame_name>lidar_link</frame_name>
      </plugin>
      <plugin name="range" filename="libgazebo_ros_ray_sensor.so">
        <ros>
          <namespace>/ray</namespace>
          <remapping>~/out:=range</remapping>
        </ros>
        <output_type>sensor_msgs/Range</output_type>
        <frame_name>lidar_link</frame_name>
      </plugin>
      <visualize>false</visualize>
    </sensor>
  </gazebo>

</robot>
